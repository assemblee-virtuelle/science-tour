<?php

namespace TheScienceTour\EventBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use TheScienceTour\MainBundle\Model\GeoNear;
use TheScienceTour\MainBundle\Utility\QueryBuilder;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends DocumentRepository
{
	
	public function findTrucks(GeoNear $geoNear = null) {
		$labelTypes = $this->dm->createQueryBuilder('TheScienceTour\EventBundle\Document\LabelType')
			->field('slug')->in(array('camion', 'inserm'))
			->getQuery()
			->execute();

		$lqb = $this->dm->createQueryBuilder('TheScienceTour\EventBundle\Document\Label');
		foreach ($labelTypes as $labelType) {
			$lqb->addOr($lqb->expr()->field('labelType')->references($labelType));
		}
		$labels = $lqb->getQuery()
			->execute();
		
		$qb = $this->createQueryBuilder()
			->field('endDate')->gte(new \DateTime());
		foreach ($labels as $label) {
			$qb->addOr($qb->expr()->field('label')->references($label));
		}
		
		if ($geoNear) {
			$qb = $geoNear->addToQueryBuilder($qb);
		}
		
		return $qb->sort('startDate', 'asc')
			->getQuery()
			->execute();
	}
	
	public function findFrontPage(GeoNear $geoNear = null) {
		$qb = $this->createQueryBuilder()
			->field('frontPage')->equals(true)
			->field('endDate')->gte(new \DateTime());
		
		if ($geoNear) {
			$qb = $geoNear->addToQueryBuilder($qb);
		}
		
		return $qb->sort('startDate', 'asc')
			->getQuery()
			->execute();
	}
	
	public function findNext(GeoNear $geoNear = null) {
		$qb = $this->createQueryBuilder()
			->field('endDate')->gte(new \DateTime());

		if ($geoNear) {
			$qb = $geoNear->addToQueryBuilder($qb);
		}
		
		return $qb->sort('startDate', 'asc')
			->getQuery()
			->execute();
	}
	
	public function findFavorite($userFavoriteEvents, GeoNear $geoNear = null) {
		$fav_ids = array();
		foreach ($userFavoriteEvents as $fav) {
			$fav_ids[] = $fav->getId();
		}
		
		$qb = $this->createQueryBuilder()
			->field("id")->in($fav_ids)
			->field('endDate')->gte(new \DateTime());
		if ($geoNear) {
			$qb = $geoNear->addToQueryBuilder($qb);
		}
		
		return $qb->sort('startDate', 'asc')
			->getQuery()
			->execute();
	}
	
	public function findPast(GeoNear $geoNear = null) {
		$qb = $this->createQueryBuilder()
			->field('endDate')->lt(new \DateTime());
		
		if ($geoNear) {
			$qb = $geoNear->addToQueryBuilder($qb);
		}
		
		return $qb->sort('startDate', 'desc')
			->getQuery()
			->execute();
	}
	
	public function findDay($date, GeoNear $geoNear = null) {
		$dayStart = new \DateTime($date . ' 00:00:00');
		$dayEnd = new \DateTime($date . ' 23:59:59');
		
		$qb = $this->createQueryBuilder()
			->field('startDate')->lte($dayEnd)
			->field('endDate')->gt($dayStart);
			
		if ($geoNear) {
			$qb = $geoNear->addToQueryBuilder($qb);
		}
		
		return $qb->getQuery()
			->execute();
	}
	
}